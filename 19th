#include <stdio.h>
#include <string.h>
#include <openssl/aes.h>
#include <openssl/rand.h>

#define AES_KEY_LENGTH 256  // Key length (128, 192, or 256 bits)
#define AES_BLOCK_SIZE 16   // AES block size (128 bits)

// Function to handle AES encryption in CBC mode
void aes_encrypt_cbc(const unsigned char *key, const unsigned char *iv,
                     const unsigned char *plaintext, unsigned char *ciphertext, size_t plaintext_len) {
    AES_KEY encrypt_key;
    AES_set_encrypt_key(key, AES_KEY_LENGTH, &encrypt_key);

    // Encrypt in CBC mode
    AES_cbc_encrypt(plaintext, ciphertext, plaintext_len, &encrypt_key, (unsigned char *)iv, AES_ENCRYPT);
}

int main() {
    // Define key and IV (Initialization Vector)
    unsigned char key[AES_KEY_LENGTH / 8];  // AES key
    unsigned char iv[AES_BLOCK_SIZE];       // Initialization vector (IV)

    // Generate random key and IV
    if (!RAND_bytes(key, sizeof(key)) || !RAND_bytes(iv, sizeof(iv))) {
        fprintf(stderr, "Error generating random bytes.\n");
        return 1;
    }

    // Example plaintext
    const char *plaintext = "This is a test message for AES encryption in CBC mode.";
    size_t plaintext_len = strlen(plaintext);
    size_t padded_len = ((plaintext_len / AES_BLOCK_SIZE) + 1) * AES_BLOCK_SIZE;

    unsigned char ciphertext[padded_len];
    memset(ciphertext, 0, sizeof(ciphertext));  // Initialize ciphertext buffer

    aes_encrypt_cbc(key, iv, (const unsigned char *)plaintext, ciphertext, padded_len);

    // Print the encrypted ciphertext in hexadecimal format
    printf("Encrypted ciphertext (hex):\n");
    for (size_t i = 0; i < padded_len; i++) {
        printf("%02x", ciphertext[i]);
    }
    printf("\n");

    return 0;
}
