#include <stdio.h>
#include <string.h>
#include <stdint.h>

// Dummy AES encryption function for demonstration purposes
void aes_encrypt(uint8_t *input, uint8_t *key, uint8_t *output) {
    // For simplicity, this function does not implement actual AES encryption.
    // This is a placeholder for demonstration.
    for (int i = 0; i < 16; i++) {
        output[i] = input[i] ^ key[i];
    }
}

// CBC-MAC function
void cbc_mac(uint8_t *key, uint8_t *message, uint8_t *mac) {
    uint8_t block[16] = {0};  // Initialize the IV (initial block to zero)
    uint8_t cipher[16];

    // Assume message is a single block for simplicity
    aes_encrypt(message, key, cipher);

    // XOR the result of encryption with the initial block (IV)
    for (int i = 0; i < 16; i++) {
        mac[i] = cipher[i] ^ block[i];
    }
}

// XOR function
void xor_blocks(uint8_t *a, uint8_t *b, uint8_t *result) {
    for (int i = 0; i < 16; i++) {
        result[i] = a[i] ^ b[i];
    }
}

// Main function
int main() {
    // Key and message (16 bytes each for AES block size)
    uint8_t key[16] = {0x1F, 0x2E, 0x3D, 0x4C, 0x5B, 0x6A, 0x7F, 0x8E,
                        0x9D, 0xAC, 0xBD, 0xCE, 0xDF, 0xE0, 0xF1, 0x00};
    uint8_t message[16] = "This is message";
    uint8_t mac[16];
    uint8_t xor_block[16];
    uint8_t two_block_message[32];

    // Calculate MAC for the one-block message
    cbc_mac(key, message, mac);

    // Create the two-block message X || (X ? T)
    xor_blocks(message, mac, xor_block);
    memcpy(two_block_message, message, 16);
    memcpy(two_block_message + 16, xor_block, 16);

    // Calculate MAC for the two-block message
    uint8_t two_block_mac[16];
    cbc_mac(key, two_block_message, two_block_mac);

    // Print results
    printf("MAC of the one-block message (T): ");
    for (int i = 0; i < 16; i++) {
        printf("%02X", mac[i]);
    }
    printf("\n");

    printf("MAC of the two-block message: ");
    for (int i = 0; i < 16; i++) {
        printf("%02X", two_block_mac[i]);
    }
    printf("\n");

    return 0;
}
