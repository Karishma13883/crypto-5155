#include <stdio.h>
#include <math.h>

// Function to perform modular exponentiation
unsigned long long mod_exp(unsigned long long base, unsigned long long exp, unsigned long long mod) {
    unsigned long long result = 1;
    base = base % mod;
    while (exp > 0) {
        if (exp % 2 == 1) {
            result = (result * base) % mod;
        }
        exp = exp >> 1;
        base = (base * base) % mod;
    }
    return result;
}

int main() {
    // Public parameters
    unsigned long long a = 5; // Base
    unsigned long long q = 23; // Prime modulus

    // Alice's private secret
    unsigned long long x_A = 6;
    // Bob's private secret
    unsigned long long x_B = 15;

    // Compute Alice's public value
    unsigned long long A = mod_exp(a, x_A, q);
    // Compute Bob's public value
    unsigned long long B = mod_exp(a, x_B, q);

    // Compute shared secret
    unsigned long long s_A = mod_exp(B, x_A, q);
    unsigned long long s_B = mod_exp(A, x_B, q);

    // Output results
    printf("Alice's public value: %llu\n", A);
    printf("Bob's public value: %llu\n", B);
    printf("Alice's shared secret: %llu\n", s_A);
    printf("Bob's shared secret: %llu\n", s_B);

    if (s_A == s_B) {
        printf("The shared secrets match!\n");
    } else {
        printf("The shared secrets do not match.\n");
    }

    return 0;
}
