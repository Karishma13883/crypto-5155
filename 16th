#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#define MAX_TEXT_LENGTH 1000
#define ALPHABET_SIZE 26

char *english_frequency = "ETAOINSHRDLCUMWFGYPBVKJXQZ";

void calculateFrequency(char *text, int *frequency) {
    for (int i = 0; i < ALPHABET_SIZE; i++) frequency[i] = 0;
    for (int i = 0; text[i] != '\0'; i++) {
        if (text[i] >= 'A' && text[i] <= 'Z') {
            frequency[text[i] - 'A']++;
        } else if (text[i] >= 'a' && text[i] <= 'z') {
            frequency[text[i] - 'a']++;
        }
    }
}

void sortFrequency(int *frequency, char *sortedAlphabet) {
    int tempFreq[ALPHABET_SIZE];
    char tempAlphabet[ALPHABET_SIZE];
    for (int i = 0; i < ALPHABET_SIZE; i++) {
        tempFreq[i] = frequency[i];
        tempAlphabet[i] = 'A' + i;
    }

    for (int i = 0; i < ALPHABET_SIZE - 1; i++) {
        for (int j = i + 1; j < ALPHABET_SIZE; j++) {
            if (tempFreq[i] < tempFreq[j]) {
                int temp = tempFreq[i];
                tempFreq[i] = tempFreq[j];
                tempFreq[j] = temp;

                char c = tempAlphabet[i];
                tempAlphabet[i] = tempAlphabet[j];
                tempAlphabet[j] = c;
            }
        }
    }

    for (int i = 0; i < ALPHABET_SIZE; i++) {
        sortedAlphabet[i] = tempAlphabet[i];
    }
}

void substitute(char *ciphertext, char *mapping, char *plaintext) {
    for (int i = 0; ciphertext[i] != '\0'; i++) {
        if (ciphertext[i] >= 'A' && ciphertext[i] <= 'Z') {
            plaintext[i] = mapping[ciphertext[i] - 'A'];
        } else if (ciphertext[i] >= 'a' && ciphertext[i] <= 'z') {
            plaintext[i] = mapping[ciphertext[i] - 'a'] + 32; // Convert to lowercase
        } else {
            plaintext[i] = ciphertext[i];
        }
    }
    plaintext[strlen(ciphertext)] = '\0';
}

int main() {
    char ciphertext[MAX_TEXT_LENGTH];
    printf("Enter the ciphertext: ");
    fgets(ciphertext, MAX_TEXT_LENGTH, stdin);
    ciphertext[strcspn(ciphertext, "\n")] = '\0';

    int n;
    printf("Enter the number of top possible plaintexts to display: ");
    scanf("%d", &n);

    int frequency[ALPHABET_SIZE];
    calculateFrequency(ciphertext, frequency);

    char sortedAlphabet[ALPHABET_SIZE];
    sortFrequency(frequency, sortedAlphabet);

    printf("Top %d possible plaintexts:\n", n);
    for (int i = 0; i < n; i++) {
        char mapping[ALPHABET_SIZE];
        for (int j = 0; j < ALPHABET_SIZE; j++) {
            mapping[sortedAlphabet[j] - 'A'] = english_frequency[(j + i) % ALPHABET_SIZE];
        }

        char plaintext[MAX_TEXT_LENGTH];
        substitute(ciphertext, mapping, plaintext);

        printf("%2d: %s\n", i + 1, plaintext);
    }

    return 0;
}
