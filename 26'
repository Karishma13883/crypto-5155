#include <stdio.h>

// Function to compute gcd of a and b
int gcd(int a, int b) {
    if (b == 0)
        return a;
    return gcd(b, a % b);
}

// Extended Euclidean Algorithm to find the modular inverse of a modulo m
int extended_gcd(int a, int b, int *x, int *y) {
    if (a == 0) {
        *x = 0;
        *y = 1;
        return b;
    }
    int x1, y1;
    int gcd = extended_gcd(b % a, a, &x1, &y1);
    *x = y1 - (b / a) * x1;
    *y = x1;
    return gcd;
}

// Function to find modular inverse of a modulo m
int mod_inverse(int a, int m) {
    int x, y;
    int gcd = extended_gcd(a, m, &x, &y);
    if (gcd != 1)
        return -1; // Modular inverse does not exist if gcd != 1
    else {
        return (x % m + m) % m; // Make sure result is positive
    }
}

int main() {
    // Given public key components
    int e = 31;
    int n = 3599;

    // Trial and error to factorize n
    int p = 0, q = 0;
    for (int i = 2; i <= n / 2; i++) {
        if (n % i == 0) {
            p = i;
            q = n / i;
            break;
        }
    }

    if (p == 0 || q == 0) {
        printf("Failed to factorize n.\n");
        return 1;
    }

    // Compute Euler's totient function f(n)
    int phi_n = (p - 1) * (q - 1);

    // Find the modular inverse of e modulo f(n)
    int d = mod_inverse(e, phi_n);

    if (d == -1) {
        printf("Modular inverse does not exist.\n");
        return 1;
    }

    // Output the results
    printf("Public key (e, n): (%d, %d)\n", e, n);
    printf("Private key (d): %d\n", d);
    printf("Factors of n: p = %d, q = %d\n", p, q);
    printf("Euler's totient function f(n): %d\n", phi_n);

    return 0;
}
