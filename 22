#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <stdint.h>

#define BLOCK_SIZE 8 
#define SEGMENT_SIZE 8 

void xor_blocks(uint8_t *a, uint8_t *b, uint8_t *out, int len) {
    for (int i = 0; i < len; i++) {
        out[i] = a[i] ^ b[i];
    }
}

void encrypt_block(uint8_t *input, uint8_t *output, uint8_t *key) {
    
    for (int i = 0; i < BLOCK_SIZE; i++) {
        output[i] = input[i] ^ key[i];
    }
}

void decrypt_block(uint8_t *input, uint8_t *output, uint8_t *key) {
    // Dummy decryption function: simple XOR with key
    for (int i = 0; i < BLOCK_SIZE; i++) {
        output[i] = input[i] ^ key[i];
    }
}

void pad(uint8_t *data, int *len) {
    int pad_len = BLOCK_SIZE - (*len % BLOCK_SIZE);
    data[*len] = 0x80; // 1 bit followed by zero bits
    for (int i = 1; i < pad_len; i++) {
        data[*len + i] = 0x00;
    }
    *len += pad_len;
}

void ECB_encrypt(uint8_t *plaintext, uint8_t *ciphertext, int len, uint8_t *key) {
    uint8_t block[BLOCK_SIZE];
    for (int i = 0; i < len; i += BLOCK_SIZE) {
        memcpy(block, plaintext + i, BLOCK_SIZE);
        encrypt_block(block, ciphertext + i, key);
    }
}

void ECB_decrypt(uint8_t *ciphertext, uint8_t *plaintext, int len, uint8_t *key) {
    uint8_t block[BLOCK_SIZE];
    for (int i = 0; i < len; i += BLOCK_SIZE) {
        memcpy(block, ciphertext + i, BLOCK_SIZE);
        decrypt_block(block, plaintext + i, key);
    }
}

void CBC_encrypt(uint8_t *plaintext, uint8_t *ciphertext, int len, uint8_t *key, uint8_t *iv) {
    uint8_t block[BLOCK_SIZE];
    uint8_t previous_block[BLOCK_SIZE];
    memcpy(previous_block, iv, BLOCK_SIZE);

    for (int i = 0; i < len; i += BLOCK_SIZE) {
        xor_blocks(plaintext + i, previous_block, block, BLOCK_SIZE);
        encrypt_block(block, ciphertext + i, key);
        memcpy(previous_block, ciphertext + i, BLOCK_SIZE);
    }
}

void CBC_decrypt(uint8_t *ciphertext, uint8_t *plaintext, int len, uint8_t *key, uint8_t *iv) {
    uint8_t block[BLOCK_SIZE];
    uint8_t previous_block[BLOCK_SIZE];
    memcpy(previous_block, iv, BLOCK_SIZE);

    for (int i = 0; i < len; i += BLOCK_SIZE) {
        decrypt_block(ciphertext + i, block, key);
        xor_blocks(block, previous_block, plaintext + i, BLOCK_SIZE);
        memcpy(previous_block, ciphertext + i, BLOCK_SIZE);
    }
}

void CFB_encrypt(uint8_t *plaintext, uint8_t *ciphertext, int len, uint8_t *key, uint8_t *iv) {
    uint8_t block[BLOCK_SIZE];
    uint8_t feedback[BLOCK_SIZE];
    memcpy(feedback, iv, BLOCK_SIZE);

    for (int i = 0; i < len; i += SEGMENT_SIZE) {
        encrypt_block(feedback, block, key);
        xor_blocks(plaintext + i, block, ciphertext + i, SEGMENT_SIZE);
        memcpy(feedback, ciphertext + i, SEGMENT_SIZE);
    }
}

void CFB_decrypt(uint8_t *ciphertext, uint8_t *plaintext, int len, uint8_t *key, uint8_t *iv) {
    uint8_t block[BLOCK_SIZE];
    uint8_t feedback[BLOCK_SIZE];
    memcpy(feedback, iv, BLOCK_SIZE);

    for (int i = 0; i < len; i += SEGMENT_SIZE) {
        encrypt_block(feedback, block, key);
        xor_blocks(ciphertext + i, block, plaintext + i, SEGMENT_SIZE);
        memcpy(feedback, ciphertext + i, SEGMENT_SIZE);
    }
}

int main() {
    uint8_t key[BLOCK_SIZE] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07};
    uint8_t iv[BLOCK_SIZE] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

    uint8_t plaintext[32] = "This is a secret message!";
    int plaintext_len = strlen((char *)plaintext);

    pad(plaintext, &plaintext_len);

    uint8_t ciphertext[32];
    uint8_t decryptedtext[32];

    printf("Original plaintext: %s\n", plaintext);

    ECB_encrypt(plaintext, ciphertext, plaintext_len, key);
    ECB_decrypt(ciphertext, decryptedtext, plaintext_len, key);
    printf("ECB Decrypted text: %s\n", decryptedtext);

    CBC_encrypt(plaintext, ciphertext, plaintext_len, key, iv);
    CBC_decrypt(ciphertext, decryptedtext, plaintext_len, key, iv);
    printf("CBC Decrypted text: %s\n", decryptedtext);

    CFB_encrypt(plaintext, ciphertext, plaintext_len, key, iv);
    CFB_decrypt(ciphertext, decryptedtext, plaintext_len, key, iv);
    printf("CFB Decrypted text: %s\n", decryptedtext);

    return 0;
}
