#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#define MAX_TEXT_LENGTH 1000

void decrypt(char *ciphertext, int shift, char *plaintext) {
    for (int i = 0; ciphertext[i] != '\0'; i++) {
        if (ciphertext[i] >= 'A' && ciphertext[i] <= 'Z') {
            plaintext[i] = ((ciphertext[i] - 'A' - shift + 26) % 26) + 'A';
        } else if (ciphertext[i] >= 'a' && ciphertext[i] <= 'z') {
            plaintext[i] = ((ciphertext[i] - 'a' - shift + 26) % 26) + 'a';
        } else {
            plaintext[i] = ciphertext[i];
        }
    }
    plaintext[strlen(ciphertext)] = '\0';
}

double score(char *text) {
    double frequencies[26] = {
        8.167, 1.492, 2.782, 4.253, 12.702, 2.228, 2.015, 6.094, 6.966, 0.153, 0.772,
        4.025, 2.406, 6.749, 7.507, 1.929, 0.095, 5.987, 6.327, 9.056, 2.758, 0.978,
        2.360, 0.150, 1.974, 0.074
    };
    int counts[26] = {0};
    int total = 0;
    
    for (int i = 0; text[i] != '\0'; i++) {
        if (text[i] >= 'A' && text[i] <= 'Z') {
            counts[text[i] - 'A']++;
            total++;
        } else if (text[i] >= 'a' && text[i] <= 'z') {
            counts[text[i] - 'a']++;
            total++;
        }
    }

    double score = 0;
    for (int i = 0; i < 26; i++) {
        double frequency = (double)counts[i] / total * 100;
        score += (frequencies[i] - frequency) * (frequencies[i] - frequency);
    }
    return score;
}

int main() {
    char ciphertext[MAX_TEXT_LENGTH];
    printf("Enter the ciphertext: ");
    fgets(ciphertext, MAX_TEXT_LENGTH, stdin);
    ciphertext[strcspn(ciphertext, "\n")] = '\0';

    int n;
    printf("Enter the number of top possible plaintexts to display: ");
    scanf("%d", &n);

    struct {
        char text[MAX_TEXT_LENGTH];
        double score;
    } results[26];

    for (int i = 0; i < 26; i++) {
        decrypt(ciphertext, i, results[i].text);
        results[i].score = score(results[i].text);
    }

    for (int i = 0; i < 26; i++) {
        for (int j = i + 1; j < 26; j++) {
            if (results[i].score > results[j].score) {
                char tempText[MAX_TEXT_LENGTH];
                double tempScore;
                strcpy(tempText, results[i].text);
                tempScore = results[i].score;
                strcpy(results[i].text, results[j].text);
                results[i].score = results[j].score;
                strcpy(results[j].text, tempText);
                results[j].score = tempScore;
            }
        }
    }

    printf("Top %d possible plaintexts:\n", n);
    for (int i = 0; i < n && i < 26; i++) {
        printf("%2d: %s\n", i + 1, results[i].text);
    }

    return 0;
}
